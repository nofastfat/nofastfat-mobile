package com.xy.animation {import flash.events.Event;import flash.events.EventDispatcher;public class DelayedCall extends EventDispatcher implements IAnimatable {	private var mCurrentTime : Number = 0;	private var mTotalTime : Number = 0;	private var mCall : Function;	private var mArgs : Array;	private var mRepeatCount : int;	public function DelayedCall(call : Function, delay : Number, args : Array = null) {		reset(call, delay, args);	}	public function reset(call : Function, delay : Number, args : Array = null) : DelayedCall {		mCurrentTime = 0;		mTotalTime = Math.max(delay, 0.0001);		mCall = call;		mArgs = args;		mRepeatCount = 1;		return this;	}	public function advanceTime(time : Number) : void {		var previousTime : Number = mCurrentTime;		mCurrentTime = Math.min(mTotalTime, mCurrentTime + time);		if (previousTime < mTotalTime && mCurrentTime >= mTotalTime) {			mCall.apply(null, mArgs);			if (mRepeatCount == 0 || mRepeatCount > 1) {				if (mRepeatCount > 0)					mRepeatCount -= 1;				mCurrentTime = 0;				advanceTime((previousTime + time) - mTotalTime);			} else {				dispatchEvent(new Event(Juggler.REMOVE_FROM_JUGGLER));			}		}	}	public function get isComplete() : Boolean {		return mRepeatCount == 1 && mCurrentTime >= mTotalTime;	}	public function get totalTime() : Number {		return mTotalTime;	}	public function get currentTime() : Number {		return mCurrentTime;	}	public function get repeatCount() : int {		return mRepeatCount;	}	public function set repeatCount(value : int) : void {		mRepeatCount = value;	}}}